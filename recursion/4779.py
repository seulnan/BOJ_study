# 재귀는 어디부터 일반적이고 초반이 특수케이스니까 초반을 잘 구분해야

# n = 0 이 될떄까지 반복해야 -> 모든 선의 길이가 1이 될때까지라는 뜻
# n = 2이면 9개니까 ---...--- 이렇게 됨 n-1
# n = 1이 두개 생긴꼴. n = 0 d

# n = 3이면 27개니까 9개 두세트 생김 n-1
# n = 2가 되고 두세트생김 9개...9개
# n = 1가 되고 3개 3개 3개 3개 네세트생김
# n = 0가 되고 8세트생김

# 규칙: 3의 3승이면 선의 길이가 1인게 총 8개. 근데 이걸 안다고해서 표현을..? 3의 0승이면 총 1개
# 아니 굳이 계산하는 로직을 -------여기에서 시작하지말고 애초에 그린다고생각하면안됨? 규칙도 알았는데?
# n = 0일때만 -이고, n =1일때는 -.-이 한세트 & - 가 2개,

# 3의 4승이면 길이가 1인게 총 16개 -.-가 4세트임 -.-
# 81개에서 27개 (빈칸 27개) 27개 이렇게 됨 
# 27개내에서는? 또 n = 3일때의 함수를하면됨
# 이게더 간단하겠다

# 3의 5승이면 길이가 1인게 총 32개

# num = int(input())

# def kanto(n):
#     if n == 1:
#         return "-"
#     kanto_unit = kanto(n//3)
#     kanto_result = kanto_unit + " "*(n//3)+kanto_unit
    
#     return kanto_result

# print(kanto(3**num))    

# 입력이 여러줄로 주어지기떄문에 입력이 끝날때까지 처리 & EOF처리가 필요함
import sys

def kanto(n):
    if n == 1:
        return "-"
    unit = kanto(n // 3)
    return unit + " " * (n // 3) + unit

for line in sys.stdin:
    n = int(line.strip())
    print(kanto(3 ** n))